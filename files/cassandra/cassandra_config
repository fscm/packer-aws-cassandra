#!/bin/bash
#
# Shell script to configure some options of Cassandra.
#
# Copyright 2016-2017, Frederico Martins
#   Author: Frederico Martins <http://github.com/fscm>
#
# SPDX-License-Identifier: MIT
#
# This program is free software. You can use it and/or modify it under the
# terms of the MIT License.
#

set -e

BASEDIR=$(dirname $0)
BASENAME=$(basename $0)
__TS__=$(date +%Y%m%d%H%M%S)

# Configuration files
CASSANDRA_ENV="/srv/cassandra/conf/cassandra-env.sh"
CASSANDRA_YAML="/srv/cassandra/conf/cassandra.yaml"

# Variables
CASSANDRA_DISABLE=0
CASSANDRA_ENABLE=0
CASSANDRA_START=0
CASSANDRA_WAIT=0

CASSANDRA_BOOTSTRAP=0
CASSANDRA_CLUSTER_NAME=
CASSANDRA_HEAP_MAXSIZE=
CASSANDRA_HEAP_NEWSIZE=
CASSANDRA_IP_ADDRESS=
CASSANDRA_MULTIREGION=0
CASSANDRA_SEEDS=
CASSANDRA_TOKENS=

__TMP_SEEDS__=()

# Usage
function show_usage() {
  echo "Usage: ${BASENAME} [options]"
  echo "  options:"
  echo "    -a            Sets the auto_bootstrap option to 'on'."
  echo "    -c <NAME>     Sets the cluster_name option to the value given (default"
  echo "                  value is 'Cassandra Cluster')."
  echo "    -D            Disables the Cassandra service from start at boot time."
  echo "    -E            Enables the Cassandra service to start at boot time."
  echo "    -i <ADDRESS>  Sets the cassandra listen address (default value is"
  echo "                  '127.0.0.1')."
  echo "    -m <MEMORY>   Sets Cassandra maximum heap size. Values should be provided"
  echo "                  following the same Java heap nomenclature."
  echo "    -n <MEMORY>   Sets Cassandra heap new size. Values should be provided"
  echo "                  following the same Java heap nomenclature."
  echo "    -r            Sets the endpoint_snitch option to 'EC2MultiRegionSnitch'"
  echo "                  (default value is 'SimpleSnitch')."
  echo "    -s <ADDRESS>  Sets the address of one seed node (or several seed nodes if"
  echo "                  the addressess are separated with a comma)."
  echo "    -S            Starts the Cassandra service after performing the required"
  echo "                  configurations (if any given)."
  echo "    -t <NUMBER>   Sets the number of tokens (default value is '4')."
  echo "    -W <SECONDS>  Waits the specified amount of seconds before starting the"
  echo "                  Cassandra service (default value is '0')."
}

# Options parsing
while getopts ":ac:DEi:m:n:rs:St:W:" opt; do
  case $opt in
    a)
      CASSANDRA_BOOTSTRAP=1
      ;;
    c)
      CASSANDRA_CLUSTER_NAME=${OPTARG}
      ;;
    D)
      CASSANDRA_DISABLE=1
      ;;
    E)
      CASSANDRA_ENABLE=1
      ;;
    i)
      CASSANDRA_IP_ADDRESS=${OPTARG}
      ;;
    m)
      CASSANDRA_HEAP_MAXSIZE=${OPTARG}
      ;;
    n)
      CASSANDRA_HEAP_NEWSIZE=${OPTARG}
      ;;
    r)
      CASSANDRA_MULTIREGION=1
      ;;
    s)
      __TMP_SEEDS__+=("${OPTARG}")
      ;;
    S)
      CASSANDRA_START=1
      ;;
    t)
      CASSANDRA_TOKENS=${OPTARG}
      ;;
    W)
      CASSANDRA_WAIT=${OPTARG}
      ;;
    \?)
      echo >&2 "  [ERROR] Invalid option: -${OPTARG}"
      exit 1
      ;;
    :)
      echo >&2 "  [ERROR] Option -${OPTARG} requires an argument"
      exit 2
      ;;
  esac
done

# Check arguments
if [[ $# -eq 0 ]]; then
  show_usage
  exit 3
fi

# Check permissions
if [[ $EUID -ne 0 ]]; then
  echo >&2 "  [ERROR] This script requires privileged access to system files"
  exit 4
fi

# Check requirements
if [[ "${CASSANDRA_ENABLE}" -gt 0 ]] && [[ "${CASSANDRA_DISABLE}" -gt 0 ]]; then
  echo >&2 "  [ERROR] Enable (-E) and Disable (-D) options can not be used together."
  exit 5
fi

# Backup configuration files
if [[ -f ${CASSANDRA_ENV} ]]; then
  cp ${CASSANDRA_ENV} ${CASSANDRA_ENV}.${__TS__}.bck
fi
if [[ -f ${CASSANDRA_YAML} ]]; then
  cp ${CASSANDRA_YAML} ${CASSANDRA_YAML}.${__TS__}.bck
fi

# Configure memory settings
if [[ "x${CASSANDRA_HEAP_MAXSIZE}" = "x" ]] && [[ "x${CASSANDRA_HEAP_NEWSIZE}" = "x" ]]; then
  echo "  [INFO] Using default memory settings... Memory allocations will be calculated every time Cassandra starts."
else
  if [[ "x${CASSANDRA_HEAP_MAXSIZE}" = "x" ]] || [[ "x${CASSANDRA_HEAP_NEWSIZE}" = "x" ]]; then
    echo "  [ERROR] Set Cassandra Max Heap Size (-m) and Cassandra New Heap Size in pair (-n)."
    exit 6
  else
    sudo sed -i -r -e "s/#HEAP_NEWSIZE=/HEAP_NEWSIZE=/;/^HEAP_NEWSIZE=/s/=.*/=\"${CASSANDRA_HEAP_NEWSIZE}\"/" ${CASSANDRA_ENV}
    sudo sed -i -r -e "s/#MAX_HEAP_SIZE=/MAX_HEAP_SIZE=/;/^MAX_HEAP_SIZE=/s/=.*/=\"${CASSANDRA_HEAP_MAXSIZE}\"/" ${CASSANDRA_ENV}
  fi
fi

# Configure cluster name
if ! [[ "x${CASSANDRA_CLUSTER_NAME}" = "x" ]]; then
  sed -i -r -e "/^cluster_name:/s/:.*/: '${CASSANDRA_CLUSTER_NAME}'/" ${CASSANDRA_YAML}
fi

# Configure listen address
if ! [[ "x${CASSANDRA_IP_ADDRESS}" = "x" ]]; then
  sed -i -r -e "/^listen_address:/s/:.*/: ${CASSANDRA_IP_ADDRESS}/" ${CASSANDRA_YAML}
  sed -i -r -e "/^broadcast_address:/s/:.*/: ${CASSANDRA_IP_ADDRESS}/" ${CASSANDRA_YAML}
  sed -i -r -e "/^broadcast_rpc_address:/s/:.*/: ${CASSANDRA_IP_ADDRESS}/" ${CASSANDRA_YAML}
fi

# Configure bootstrap
if [[ "${CASSANDRA_BOOTSTRAP}" -gt 0 ]]; then
  sudo sed -i -r -e '/auto_bootstrap:/{h;s/#*auto_bootstrap:.*/auto_bootstrap: true/};${x;/^$/{s//\nauto_bootstrap: true/;H};x}' ${CASSANDRA_YAML}
fi

# Configure tokens
if ! [[ "x${CASSANDRA_TOKENS}" = "x" ]]; then
  sed -i -r -e "/^num_tokens:/s/:.*/: ${CASSANDRA_TOKENS}/" ${CASSANDRA_YAML}
fi

# Configure snitch to multi-region
if [[ "${CASSANDRA_MULTIREGION}" -gt 0 ]]; then
  sed -i -r -e "/^endpoint_snitch:/s/:.*/: EC2MultiRegionSnitch/" ${CASSANDRA_YAML}
fi

# Configure seeds
if [[ ${#__TMP_SEEDS__[@]} -gt 0 ]]; then
  CASSANDRA_SEEDS="${__TMP_SEEDS__[@]}"
  sed -i -r -e "/- seeds:/s/:.*/: \"${CASSANDRA_SEEDS// /,}\"/" ${CASSANDRA_YAML}
fi

# Enable the service
[[ "${CASSANDRA_ENABLE}" -gt 0 ]] && systemctl enable cassandra.service

# Disable the service
[[ "${CASSANDRA_DISABLE}" -gt 0 ]] && systemctl disable cassandra.service

# Start the service
if [[ "${CASSANDRA_START}" -gt 0 ]]; then
  echo "  [INFO] Cassandra will start in ${CASSANDRA_WAIT} second(s)..."
  nohup sh -c "sleep ${CASSANDRA_WAIT} ; systemctl start cassandra.service" &> /dev/null &
fi

# Clean up unneeded backups
diff -q ${CASSANDRA_ENV} ${CASSANDRA_ENV}.${__TS__}.bck &> /dev/null && rm -f ${CASSANDRA_ENV}.${__TS__}.bck || true
diff -q ${CASSANDRA_YAML} ${CASSANDRA_YAML}.${__TS__}.bck &> /dev/null && rm -f ${CASSANDRA_YAML}.${__TS__}.bck || true

# All done
echo "  [INFO] Configuration(s) successfully updated"
exit 0
